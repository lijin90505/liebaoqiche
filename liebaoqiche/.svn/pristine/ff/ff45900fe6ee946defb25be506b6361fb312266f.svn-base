package com.ibest.pay.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ibest.framework.common.enums.EnumsRtnMapResult;
import com.ibest.framework.common.persistence.BaseController;
import com.ibest.framework.common.utils.PageList;
import com.ibest.pay.dto.input.PayInfoInputDTO;
import com.ibest.pay.entity.PayInfo;
import com.ibest.pay.service.PayInfoService;

@Controller
@RequestMapping(value="${adminPath}/pay/payInfo")
public class PayInfoController extends BaseController {
	
	private static final Logger logger = LoggerFactory.getLogger(PayInfoController.class);
	
	@Autowired
	private PayInfoService payInfoService;
	
	/**
	* 进入到列表页
	*/
	@RequestMapping(value="/")
	public String index(){
		return "module/pay/payInfo/payInfoList";
	}
	
	/**
	* 进入到表单页-创建
	*/
	@RequestMapping(value="/add")
	public String add(){
		
		return "module/pay/payInfo/payInfoForm";
	}
	
	/**
	* 进入到表单页，编辑
	*/
	@RequestMapping(value="/edit")
	public String edit(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				PayInfo payInfo = payInfoService.findById(id);
				if(payInfo != null){
					model.addAttribute("payInfo", payInfo);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要编辑的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/pay/payInfo/payInfoForm";
	}
	
	/**
	* 进入到详情页
	*/
	@RequestMapping(value="/view")
	public String view(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				PayInfo payInfo = payInfoService.findById(id);
				if(payInfo != null){
					model.addAttribute("payInfo", payInfo);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要查看的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/pay/payInfo/payInfoDetail";
	}

	/**
	* 异步分页查询
	*/
	@ResponseBody
	@RequiresPermissions("payInfo:query")
	@RequestMapping(value="/list")
	public PageList<PayInfo> list(PayInfoInputDTO payInfo, HttpServletRequest request){
		
		PageList<PayInfo> pageList = new PageList<PayInfo>();
		
		try {
			//设置分页参数
			super.setPage(request, pageList);
		
			pageList = payInfoService.findByPage(pageList, payInfo);
			
			List<PayInfo> payInfoList = pageList.getRows();
			List<PayInfo> list = new ArrayList<PayInfo>();
			if(payInfoList!=null && payInfoList.size()>0) {
				for (PayInfo info : payInfoList) {
					if(info.getPayType().equals("00")) {
						info.setPayType("银联网关支付");
					}else if(info.getPayType().equals("01")) {
						info.setPayType("支付宝电脑网站支付");
					}else if(info.getPayType().equals("06")) {
						info.setPayType("支付宝手机网站支付");
					}else if(info.getPayType().equals("07")) {
						info.setPayType("支付宝当面扫码支付");
					}else if(info.getPayType().equals("11")) {
						info.setPayType("支付宝APP支付");
					}else if(info.getPayType().equals("02")) {
						info.setPayType("支付宝条码支付");
					}else if(info.getPayType().equals("03")) {
						info.setPayType("微信扫码支付");
					}else if(info.getPayType().equals("04")) {
						info.setPayType("微信APP支付");
					}else if(info.getPayType().equals("05")) {
						info.setPayType("微信公众号支付");
					}else if(info.getPayType().equals("10")) {
						info.setPayType("微信H5支付");
					}
					
					if(info.getOutSystemId().equals("01")) {
						info.setOutSystemId("经销商管理系统");
					}else if(info.getOutSystemId().equals("02")) {
						info.setOutSystemId("APP");
					}else if(info.getOutSystemId().equals("03")) {
						info.setOutSystemId("UBI保险");
					}
					
					if(info.getDeviceId().equals("01")) {
						info.setDeviceId("PC端");
					}else if(info.getDeviceId().equals("02")) {
						info.setDeviceId("APP");
					}else if(info.getDeviceId().equals("03")) {
						info.setDeviceId("H5");
					}else if(info.getDeviceId().equals("04")) {
						info.setDeviceId("公众号");
					}else if(info.getDeviceId().equals("05")) {
						info.setDeviceId("小程序");
					}
					
					if(info.getOrderStatus()!=null) {
						if(info.getOrderStatus().equals("00")) {
							info.setOrderStatus("成功");
						}else if(info.getOrderStatus().equals("01")) {
							info.setOrderStatus("失败");
						}else if(info.getOrderStatus().equals("02")) {
							info.setOrderStatus("未知错误请查询交易状态");
						}else if(info.getOrderStatus().equals("03")) {
							info.setOrderStatus("申请退款中");
						}
					}
					list.add(info);
				}
			}
			pageList.setRows(list);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return pageList;
	}
	
	/**
	* 异步表单提交
	*/
	@ResponseBody
	@RequiresPermissions("payInfo:create")
	@RequestMapping(value="create")
	public Map<String, Object> insert(PayInfo payInfo){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = payInfoService.insert(payInfo);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("payInfo:update")
	@RequestMapping(value="update")
	public Map<String, Object> update(PayInfo payInfo){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = payInfoService.update(payInfo);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("payInfo:delete")
	@RequestMapping(value="delete")
	public Map<String, Object> delete(@RequestParam(required=true) String ids){
		
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "删除成功");
		
		try {
			int result = payInfoService.deleteByIds(ids);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "删除失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
}
