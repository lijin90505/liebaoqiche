package com.ibest.accesssystem.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.ibest.integral.dto.input.PointRuleInputDTO;
import com.ibest.integral.entity.PointRule;
import com.ibest.utils.ConstantUtils;
import com.ibest.utils.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ibest.framework.common.enums.EnumsRtnMapResult;
import com.ibest.framework.common.persistence.BaseController;
import com.ibest.framework.common.utils.PageList;
import com.ibest.accesssystem.dto.input.AccessSystemInputDTO;
import com.ibest.accesssystem.entity.AccessSystem;
import com.ibest.accesssystem.service.AccessSystemService;

@Controller
@RequestMapping(value="${adminPath}/accesssystem/accessSystem")
public class AccessSystemController extends BaseController {
	
	private static final Logger logger = LoggerFactory.getLogger(AccessSystemController.class);
	
	@Autowired
	private AccessSystemService accessSystemService;
	
	/**
	* 进入到列表页
	*/
	@RequestMapping(value="/")
	public String index(){
		return "module/accesssystem/accessSystem/accessSystemList";
	}
	
	/**
	* 进入到表单页-创建
	*/
	@RequestMapping(value="/add")
	public String add(){
		
		return "module/accesssystem/accessSystem/accessSystemForm";
	}
	
	/**
	* 进入到表单页，编辑
	*/
	@RequestMapping(value="/edit")
	public String edit(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				AccessSystem accessSystem = accessSystemService.findById(id);
				if(accessSystem != null){
					model.addAttribute("accessSystem", accessSystem);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要编辑的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/accesssystem/accessSystem/accessSystemForm";
	}
	
	/**
	* 进入到详情页
	*/
	@RequestMapping(value="/view")
	public String view(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				AccessSystem accessSystem = accessSystemService.findById(id);
				if(accessSystem != null){
					model.addAttribute("accessSystem", accessSystem);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要查看的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/accesssystem/accessSystem/accessSystemDetail";
	}

	/**
	* 异步分页查询
	*/
	@ResponseBody
	@RequiresPermissions("accessSystem:query")
	@RequestMapping(value="/list")
	public PageList<AccessSystem> list(AccessSystemInputDTO accessSystem, HttpServletRequest request){
		
		PageList<AccessSystem> pageList = new PageList<AccessSystem>();
		
		try {
			//设置分页参数
			super.setPage(request, pageList);
		
			pageList = accessSystemService.findByPage(pageList, accessSystem);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return pageList;
	}

	/**
	 * 异步分页查询
	 */
	@ResponseBody
	@RequiresPermissions("accessSystem:query")
	@RequestMapping(value="/accessSystems")
	public List<AccessSystem> accessSystems(AccessSystemInputDTO inputDTO) throws Exception{
		return accessSystemService.findByObject(inputDTO);
	}

	/**
	* 异步表单提交
	*/
	@ResponseBody
	@RequiresPermissions("accessSystem:create")
	@RequestMapping(value="create")
	public Map<String, Object> insert(AccessSystem accessSystem){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			accessSystem.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
			accessSystem.setId(RandomUtils.RandomUUID());
			int result = accessSystemService.insert(accessSystem);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("accessSystem:update")
	@RequestMapping(value="update")
	public Map<String, Object> update(AccessSystem accessSystem){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = accessSystemService.update(accessSystem);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("accessSystem:delete")
	@RequestMapping(value="delete")
	public Map<String, Object> delete(@RequestParam(required=true) String ids){
		
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "删除成功");
		
		try {
			int result = accessSystemService.deleteByIds(ids);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "删除失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	/**
	 * 查询系统拥有的支付渠道
	 * @param systemSign
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "sysPaychannel")
	public AccessSystem systemPayChannnel(@RequestParam("systemSign") String systemSign) {
		AccessSystem accessSystem = null;
		try {
			accessSystem = accessSystemService.getSystemPayChannnel(systemSign);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
		}
		return accessSystem;
	}

	/**
	 * 授权支付系统
	 * @param systemSign 系统id
	 * @param allChannelsId 支付渠道id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="accredit")
	public Map<String,Object> accredit(@RequestParam(value="systemSign", required=true) String systemSign, @RequestParam("allChannelsId") String allChannelsId) {

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "授权成功");

		try {
			//进行授权
			accessSystemService.accredit(systemSign, allChannelsId);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	//`````````````````````````````积分`````````````````````````````````
	/**
	 * 查询系统拥有的积分规则
	 * @param systemSign
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "sysPointRule")
	public AccessSystem sysPointRule(@RequestParam("systemSign") String systemSign) {
		AccessSystem accessSystem = null;
		try {
			accessSystem = accessSystemService.getSystemPointRule(systemSign);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
		}
		return accessSystem;
	}

	/**
	 * 授权积分规则
	 * @param systemSign 系统id
	 * @param allPointRulesId 积分规则id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="accreditPoint")
	public Map<String,Object> accreditPoint(@RequestParam(value="systemSign", required=true) String systemSign, @RequestParam("allPointRulesId") String allPointRulesId) {

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "授权成功");

		try {
			//进行授权
			accessSystemService.accreditPoint(systemSign, allPointRulesId);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	//`````````````````````````````卡券`````````````````````````````````
	/**
	 * 查询系统拥有的积分规则
	 * @param systemSign
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "sysCoupon")
	public AccessSystem sysCoupon(@RequestParam("systemSign") String systemSign) {
		AccessSystem accessSystem = null;
		try {
			accessSystem = accessSystemService.getSystemCoupon(systemSign);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
		}
		return accessSystem;
	}

	/**
	 * 授权积分规则
	 * @param systemSign 系统id
	 * @param allCouponsId 积分规则id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="accreditCoupon")
	public Map<String,Object> accreditCoupon(@RequestParam(value="systemSign", required=true) String systemSign, @RequestParam("allCouponsId") String allCouponsId) {

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "授权成功");

		try {
			//进行授权
			accessSystemService.accreditCoupon(systemSign, allCouponsId);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	//`````````````````````````````活动`````````````````````````````````
	/**
	 * 查询系统拥有的积分规则
	 * @param systemSign
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "sysActivity")
	public AccessSystem sysActivity(@RequestParam("systemSign") String systemSign) {
		AccessSystem accessSystem = null;
		try {
			accessSystem = accessSystemService.getSystemActivity(systemSign);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
		}
		return accessSystem;
	}

	/**
	 * 授权积分规则
	 * @param systemSign 系统id
	 * @param allActivitysId 积分规则id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="accreditActivity")
	public Map<String,Object> accreditActivity(@RequestParam(value="systemSign", required=true) String systemSign, @RequestParam("allActivitysId") String allActivitysId) {

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "授权成功");

		try {
			//进行授权
			accessSystemService.accreditActivity(systemSign, allActivitysId);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
}
