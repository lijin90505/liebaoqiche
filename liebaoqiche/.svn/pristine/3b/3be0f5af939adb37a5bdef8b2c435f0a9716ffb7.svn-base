package com.ibest.activity.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.ibest.activity.entity.Activity;
import com.ibest.activity.enums.EnumsActivityStatus;
import com.ibest.activity.service.ActivityService;
import com.ibest.card.entity.Coupon;
import com.ibest.card.service.CouponService;
import com.ibest.framework.common.utils.DateUtil;
import com.ibest.framework.common.utils.UserUtils;
import com.ibest.framework.system.entity.SysUser;
import com.ibest.user.entity.User;
import com.ibest.utils.ConstantUtils;
import com.ibest.utils.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ibest.framework.common.enums.EnumsRtnMapResult;
import com.ibest.framework.common.persistence.BaseController;
import com.ibest.framework.common.utils.PageList;
import com.ibest.activity.dto.input.ActivityCouponInputDTO;
import com.ibest.activity.entity.ActivityCoupon;
import com.ibest.activity.service.ActivityCouponService;

@Controller
@RequestMapping(value="${adminPath}/activity/activityCoupon")
public class ActivityCouponController extends BaseController {
	
	private static final Logger logger = LoggerFactory.getLogger(ActivityCouponController.class);
	
	@Autowired
	private ActivityCouponService activityCouponService;

	@Autowired
	private ActivityService activityService;

	@Autowired
	private CouponService couponService;
	
	/**
	* 进入到列表页
	*/
	@RequestMapping(value="/")
	public String index(){
		return "module/activity/activityCoupon/activityCouponList";
	}
	
	/**
	* 进入到表单页-创建
	*/
	@RequestMapping(value="/add")
	public String add(){
		
		return "module/activity/activityCoupon/activityCouponForm";
	}
	
	/**
	* 进入到表单页，编辑
	*/
	@RequestMapping(value="/edit")
	public String edit(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				ActivityCoupon activityCoupon = activityCouponService.findById(id);
				if(activityCoupon != null){
					model.addAttribute("activityCoupon", activityCoupon);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要编辑的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/activity/activityCoupon/activityCouponForm";
	}
	
	/**
	* 进入到详情页
	*/
	@RequestMapping(value="/view")
	public String view(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				ActivityCoupon activityCoupon = activityCouponService.findById(id);
				if(activityCoupon != null){
					model.addAttribute("activityCoupon", activityCoupon);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要查看的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/activity/activityCoupon/activityCouponDetail";
	}

	/**
	* 异步分页查询
	*/
	@ResponseBody
	@RequiresPermissions("activityCoupon:query")
	@RequestMapping(value="/list")
	public PageList<ActivityCoupon> list(ActivityCouponInputDTO activityCoupon, HttpServletRequest request){
		
		PageList<ActivityCoupon> pageList = new PageList<ActivityCoupon>();
		
		try {
			//设置分页参数
			super.setPage(request, pageList);
		
			pageList = activityCouponService.findByPage(pageList, activityCoupon);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return pageList;
	}
	
	/**
	* 异步表单提交
	*/
	@ResponseBody
	@RequiresPermissions("activityCoupon:create")
	@RequestMapping(value="create")
	public Map<String, Object> insert(ActivityCoupon activityCoupon){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			activityCoupon.setId(com.ibest.utils.RandomUtils.RandomUUID());
			activityCoupon.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
			int result = activityCouponService.insert(activityCoupon);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	@ResponseBody
	@RequiresPermissions("activityCoupon:update")
	@RequestMapping(value="update")
	public Map<String, Object> update(ActivityCoupon activityCoupon){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = activityCouponService.update(activityCoupon);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("activityCoupon:delete")
	@RequestMapping(value="delete")
	public Map<String, Object> delete(@RequestParam(required=true) String ids){
		
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "删除成功");
		
		try {
			int result = activityCouponService.deleteByIds(ids);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "删除失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	/**
	 * 活动卡券关联
	 * @param couponId
	 * @param activityId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="insertActivityCoupon")
	public Map<String, Object> insertActivityPoint(@RequestParam String couponId, @RequestParam String activityId){
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		if(com.ibest.framework.common.utils.StringUtils.isBlank(couponId) ||
				com.ibest.framework.common.utils.StringUtils.isBlank(activityId)) {
			setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
		}
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");

		try {
			ActivityCoupon activityCoupon = getActivityCoupon(couponId, activityId);

			int result = activityCouponService.insert(activityCoupon);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	/**
	 * buildActivityCoupon
	 * @param couponId
	 * @param activityId
	 * @return
	 * @throws Exception
	 */
	private ActivityCoupon getActivityCoupon(@RequestParam String couponId, @RequestParam String activityId)
			throws Exception {
		Activity activity = activityService.findById(activityId);
		Coupon coupon = couponService.findById(couponId);
		ActivityCoupon activityCoupon = new ActivityCoupon();
		activityCoupon.setId(RandomUtils.RandomUUID());
		activityCoupon.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
		activityCoupon.setCouponId(coupon.getId());
		activityCoupon.setCouponName(coupon.getCouponName());
		activityCoupon.setActivityId(activity.getId());
		activityCoupon.setActivityName(activity.getActivityName());
		activityCoupon.setStatus(EnumsActivityStatus.getValue("未开始"));
		activityCoupon.setCreater(UserUtils.getCurrentUser().getRealname());
		SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
		activityCoupon.setCreateTime(dateFormat.parse(dateFormat.format(new Date())));
		activityCoupon.setModifier(UserUtils.getCurrentUser().getRealname());
		activityCoupon.setModifyTime(dateFormat.parse(dateFormat.format(new Date())));
		return activityCoupon;
	}
}
