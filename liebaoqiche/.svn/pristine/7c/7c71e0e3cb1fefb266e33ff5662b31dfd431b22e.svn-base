package com.ibest.activity.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.ibest.activity.entity.Activity;
import com.ibest.activity.enums.EnumsActivityStatus;
import com.ibest.activity.service.ActivityService;
import com.ibest.experience.entity.ExpRule;
import com.ibest.experience.service.ExpRuleService;
import com.ibest.framework.common.utils.UserUtils;
import com.ibest.utils.ConstantUtils;
import com.ibest.utils.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ibest.framework.common.enums.EnumsRtnMapResult;
import com.ibest.framework.common.persistence.BaseController;
import com.ibest.framework.common.utils.PageList;
import com.ibest.activity.dto.input.ActivityExpInputDTO;
import com.ibest.activity.entity.ActivityExp;
import com.ibest.activity.service.ActivityExpService;

@Controller
@RequestMapping(value="${adminPath}/activity/activityExp")
public class ActivityExpController extends BaseController {
	
	private static final Logger logger = LoggerFactory.getLogger(ActivityExpController.class);
	
	@Autowired
	private ActivityExpService activityExpService;

	@Autowired
	private ActivityService activityService;

	@Autowired
	private ExpRuleService expRuleService;
	
	/**
	* 进入到列表页
	*/
	@RequestMapping(value="/")
	public String index(){
		return "module/activity/activityExp/activityExpList";
	}
	
	/**
	* 进入到表单页-创建
	*/
	@RequestMapping(value="/add")
	public String add(){
		
		return "module/activity/activityExp/activityExpForm";
	}
	
	/**
	* 进入到表单页，编辑
	*/
	@RequestMapping(value="/edit")
	public String edit(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				ActivityExp activityExp = activityExpService.findById(id);
				if(activityExp != null){
					model.addAttribute("activityExp", activityExp);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要编辑的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/activity/activityExp/activityExpForm";
	}
	
	/**
	* 进入到详情页
	*/
	@RequestMapping(value="/view")
	public String view(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				ActivityExp activityExp = activityExpService.findById(id);
				if(activityExp != null){
					model.addAttribute("activityExp", activityExp);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要查看的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/activity/activityExp/activityExpDetail";
	}

	/**
	* 异步分页查询
	*/
	@ResponseBody
	@RequiresPermissions("activityExp:query")
	@RequestMapping(value="/list")
	public PageList<ActivityExp> list(ActivityExpInputDTO activityExp, HttpServletRequest request){
		
		PageList<ActivityExp> pageList = new PageList<ActivityExp>();
		
		try {
			//设置分页参数
			super.setPage(request, pageList);
		
			pageList = activityExpService.findByPage(pageList, activityExp);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return pageList;
	}
	
	/**
	* 异步表单提交
	*/
	@ResponseBody
	@RequiresPermissions("activityExp:create")
	@RequestMapping(value="create")
	public Map<String, Object> insert(ActivityExp activityExp){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			activityExp.setId(com.ibest.utils.RandomUtils.RandomUUID());
			activityExp.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
			int result = activityExpService.insert(activityExp);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	@ResponseBody
	@RequiresPermissions("activityExp:update")
	@RequestMapping(value="update")
	public Map<String, Object> update(ActivityExp activityExp){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = activityExpService.update(activityExp);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("activityExp:delete")
	@RequestMapping(value="delete")
	public Map<String, Object> delete(@RequestParam(required=true) String ids){
		
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "删除成功");
		
		try {
			int result = activityExpService.deleteByIds(ids);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "删除失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	/**
	 * 活动经验值关联
	 * @param expId
	 * @param activityId
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="insertActivityExp")
	public Map<String, Object> insertActivityExp(@RequestParam String expId, @RequestParam String activityId){
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		if(com.ibest.framework.common.utils.StringUtils.isBlank(expId) ||
				com.ibest.framework.common.utils.StringUtils.isBlank(activityId)) {
			setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
		}
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");

		try {
			ActivityExp activityExp = getActivityExp(expId, activityId);

			int result = activityExpService.insert(activityExp);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}

	/**
	 * buildActivityExp
	 * @param expId
	 * @param activityId
	 * @return
	 * @throws Exception
	 */
	private ActivityExp getActivityExp(@RequestParam String expId, @RequestParam String activityId)
			throws Exception {
		Activity activity = activityService.findById(activityId);
		ExpRule expRule = expRuleService.findById(expId);
		ActivityExp activityExp = new ActivityExp();
		activityExp.setId(RandomUtils.RandomUUID());
		activityExp.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
		activityExp.setExpId(expRule.getId());
		activityExp.setExp(expRule.getExp());
		activityExp.setActivityId(activity.getId());
		activityExp.setActivityName(activity.getActivityName());
		activityExp.setStatus(EnumsActivityStatus.getValue("未开始"));
		activityExp.setCreater(UserUtils.getCurrentUser().getRealname());
		SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
		activityExp.setCreateTime(dateFormat.parse(dateFormat.format(new Date())));
		activityExp.setModifier(UserUtils.getCurrentUser().getRealname());
		activityExp.setModifyTime(dateFormat.parse(dateFormat.format(new Date())));
		return activityExp;
	}
}
