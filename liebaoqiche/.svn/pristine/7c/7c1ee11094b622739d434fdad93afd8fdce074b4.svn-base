package com.ibest.activity.service;

import com.ibest.activity.dao.ActivityCardDao;
import com.ibest.activity.dao.ActivityDao;
import com.ibest.activity.dao.ActivityIntegralDao;
import com.ibest.activity.dto.input.ActivityCardInputDTO;
import com.ibest.activity.dto.input.ActivityInputDTO;
import com.ibest.activity.dto.input.ActivityIntegralInputDTO;
import com.ibest.activity.entity.Activity;
import com.ibest.activity.entity.ActivityCard;
import com.ibest.activity.entity.ActivityIntegral;
import com.ibest.framework.common.utils.StringUtils;
import com.ibest.framework.common.utils.UserUtils;
import com.ibest.utils.ConstantUtils;
import com.ibest.utils.RandomUtils;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.ibest.framework.common.utils.PageList;

import com.ibest.activity.dao.ActivityDetailsDao;
import com.ibest.activity.entity.ActivityDetails;
import com.ibest.activity.dto.input.ActivityDetailsInputDTO;

import java.util.Date;

@Service
@Transactional(readOnly = true)
public class ActivityDetailsService {

	@Autowired
	protected ActivityDetailsDao activityDetailsDao;

	@Autowired
	protected ActivityDao activityDao;

	@Autowired
	protected ActivityCardDao activityCardDao;

	@Autowired
	protected ActivityIntegralDao activityIntegralDao;

	public ActivityDetails findById(String id)
			throws Exception {
		return activityDetailsDao.findById(id);
	}

	@Transactional(readOnly = false)
	public int insert(ActivityDetails activityDetails)
			throws Exception {
		activityDetails.preInsert();
		int result = activityDetailsDao.insert(activityDetails);
		return result;
	}

	@Transactional(readOnly = false)
	public int deleteById(String id)
			throws Exception {
		int result = activityDetailsDao.deleteById(id);
		return result;
	}

	@Transactional(readOnly = false)
	public int deleteByIds(String ids)
			throws Exception {
		int result = activityDetailsDao.deleteByIds(StringUtils.tokenizeToList(ids));
		return result;
	}

	@Transactional(readOnly = false)
	public int update(ActivityDetails activityDetails)
			throws Exception {
		activityDetails.preUpdate();
		int result = activityDetailsDao.update(activityDetails);
		return result;
	}

	/**
	 * 分页查询
	 *
	 * @param page
	 * @param inputDto
	 * @return
	 * @throws Exception
	 */
	public PageList<ActivityDetails> findByPage(PageList<ActivityDetails> page, ActivityDetailsInputDTO inputDto)
			throws Exception {

		if (page == null) {
			page = new PageList<ActivityDetails>();
		}

		long totalCount = activityDetailsDao.countByObject(inputDto);
		if (totalCount > 0) {
			// 设置记录总条数
			page.setTotal(totalCount);

			// 设置分页参数，查询数据
			inputDto.setLimitStart((page.getPage() - 1) * page.getPageSize());
			inputDto.setLimitSize(page.getPageSize());
			page.setRows(activityDetailsDao.findByObject(inputDto));
		}

		return page;
	}

	/**
	 * 查询列表
	 */
	public ActivityDetails findByObject(ActivityDetailsInputDTO inputDto)
			throws Exception {
		return activityDetailsDao.findOneByObject(inputDto);
	}


	/**
	 * 获取活动拥有的卡券
	 *
	 * @param activityId
	 * @return
	 * @throws Exception
	 */
	public ActivityDetails getActivityCard(String activityId)
			throws Exception {
		ActivityDetails activityDetails = activityDetailsDao.findById(activityId);
		if (null != activityDetails) {
			ActivityCardInputDTO inputDTO = new ActivityCardInputDTO();
			inputDTO.setActivityId(activityId);
			activityDetails.setActivityDetailsChooseCardList(activityCardDao.getChoosedCard(inputDTO));
			activityDetails.setActivityDetailsUnChooseCardList(activityCardDao.getUnChoosedCard(inputDTO));
		}
		return activityDetails;
	}

	/**
	 * 授权
	 *
	 * @param activityId   活动id
	 * @param allCardsId   卡券id
	 */
	@Transactional(readOnly = false)
	public void accreditCard(String activityId, String allCardsId) {
		//删除已经授权的卡券
		activityCardDao.deleteByActivityId(activityId);
		// 重新授权
		if (StringUtils.isNotEmpty(allCardsId)) {
			String[] cids = allCardsId.split(",");
			for (String cid : cids) {
				ActivityCard activityCard = new ActivityCard();
				activityCard.setActivityId(activityId);
				activityCard.setCardId(cid);
				activityCard.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				activityCard.setId(RandomUtils.RandomUUID());
				activityCard.setCreater(UserUtils.getCurrentUser().getRealname());
				activityCard.setCreateTime(new Date());
				activityCard.setModifier(UserUtils.getCurrentUser().getRealname());
				activityCard.setModifyTime(new Date());
				activityCard.preInsert();
				activityCardDao.insert(activityCard);
			}
		}
	}


	//``````````````````````积分`````````````````````````````````

	/**
	 * 获取活动拥有的积分
	 *
	 * @param activityId
	 * @return
	 * @throws Exception
	 */
	public ActivityDetails getActivityIntegral(String activityId)
			throws Exception {
		ActivityDetails activityDetails = activityDetailsDao.findById(activityId);
		if (activityDetails != null) {
			ActivityIntegralInputDTO inputDTO = new ActivityIntegralInputDTO();
			inputDTO.setActivityId(activityId);
			activityDetails.setActivityDetailsChooseIntegralList(activityIntegralDao.getChoosedIntegral(inputDTO));
			activityDetails.setActivityDetailsUnChooseIntegralList(activityIntegralDao.getUnChoosedIntegral(inputDTO));
		}
		return activityDetails;
	}

	/**
	 * 授权
	 *
	 * @param activityId      活动id
	 * @param allIntegralsId 积分id
	 */
	@Transactional(readOnly = false)
	public void accreditIntegral(String activityId, String allIntegralsId) {

		// 删除已经授权的积分
		activityIntegralDao.deleteByActivityId(activityId);
		// 重新授权积分
		if (StringUtils.isNotEmpty(allIntegralsId)) {
			String[] ids = allIntegralsId.split(",");
			for (String id : ids) {
				ActivityIntegral activityIntegral = new ActivityIntegral();
				activityIntegral.setActivityId(activityId);
				activityIntegral.setIntegralId(id);
				activityIntegral.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				activityIntegral.setId(RandomUtils.RandomUUID());
				activityIntegral.setCreater(UserUtils.getCurrentUser().getRealname());
				activityIntegral.setCreateTime(new Date());
				activityIntegral.setModifier(UserUtils.getCurrentUser().getRealname());
				activityIntegral.setModifyTime(new Date());
				activityIntegral.preInsert();
				activityIntegralDao.insert(activityIntegral);
			}
		}
	}

	//``````````````````````经验值`````````````````````````````````

	/**
	 * 获取活动拥有的经验值
	 *
	 * @param activityId
	 * @return
	 * @throws Exception
	 */
	public ActivityDetails getActivityExperience(String activityId)
			throws Exception {
		ActivityDetails activityDetails = activityDetailsDao.findById(activityId);
		if (activityDetails != null) {
			ActivityInputDTO inputDTO = new ActivityInputDTO();
			inputDTO.setActivityId(activityId);
			activityDetails.setActivityDetailsChooseExperienceList(activityDao.getChoosedExperience(inputDTO));
			activityDetails.setActivityDetailsUnChooseExperienceList(activityDao.getUnChoosedExperience(inputDTO));
		}
		return activityDetails;
	}

	/**
	 * 授权
	 *
	 * @param activityId      活动id
	 * @param allExperiencesId 经验值id
	 */
	@Transactional(readOnly = false)
	public void accreditExperience(String activityId, String allExperiencesId) {

		// 删除已经授权的经验值
		activityDao.deleteByActivityId(activityId);
		// 重新授权经验值
		if (StringUtils.isNotEmpty(allExperiencesId)) {
			String[] ids = allExperiencesId.split(",");
			for (String id : ids) {
				Activity activity = new Activity();
				activity.setActivityDetailsId(activityId);
				activity.setExperienceId(id);
				activity.setState("2");
				activity.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				activity.setId(RandomUtils.RandomUUID());
				activity.setCreater(UserUtils.getCurrentUser().getRealname());
				activity.setCreateTime(new Date());
				activity.setModifier(UserUtils.getCurrentUser().getRealname());
				activity.setModifyTime(new Date());
				activity.preInsert();
				activityDao.insert(activity);
			}
		}
	}
}
