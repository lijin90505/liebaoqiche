package com.ibest.integral.service;

import java.util.Date;
import java.util.List;
import com.ibest.framework.common.utils.StringUtils;
import com.ibest.framework.common.utils.UserUtils;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.ibest.framework.common.utils.PageList;

import com.ibest.integral.dao.UserIntegralDao;
import com.ibest.integral.entity.UserIntegral;
import com.ibest.integral.entity.UserIntegralCount;
import com.ibest.user.dao.UserDao;
import com.ibest.user.entity.User;
import com.ibest.user.entity.UserCars;
import com.ibest.user.service.UserCarsService;
import com.ibest.utils.RandomUtils;
import com.ibest.integral.dto.input.UserIntegralInputDTO;

@Service
@Transactional(readOnly=true)
public class UserIntegralService {

	@Autowired
	protected UserIntegralDao userIntegralDao;
	@Autowired
	protected UserDao userDao;
	@Autowired
	protected UserIntegralCountService userIntegralCountService;
	@Autowired
	protected UserCarsService usercars;
	
	public UserIntegral findById(String id) throws Exception{
		return userIntegralDao.findById(id);
	}
	
	public UserIntegral findByUserId(String userId) throws Exception{
		return userIntegralDao.findByUserId(userId);
	}
	
	/**
	 * 积分更新
	 * @param userIntegral
	 * @throws Exception
	 */
	@Transactional(readOnly=false)
	public boolean integralUpdate(UserIntegral userIntegral)throws Exception{
		boolean flag =true;
		UserIntegral integral = this.findByUserId(userIntegral.getUserId());
		User user = userDao.findById(userIntegral.getUserId());
		List<UserCars> cars = usercars.findVinNoByUserId(userIntegral.getUserId());
		String vinNo =cars.get(0).getVinCode();
		if(integral!=null){
			integral.setIntegral(userIntegral.getIntegral());
			integral.setType(userIntegral.getType());
			integral.setModifier(UserUtils.getCurrentUser().getRealname());
			integral.setModifyTime(new Date());
			this.update(integral);
		}else{
			userIntegral.setId(RandomUtils.RandomUUID());
			userIntegral.setAccessSystemId("积分卡券系统");
			userIntegral.setAppId("后台PC");
			userIntegral.setUserId(userIntegral.getUserId());
			userIntegral.setVinNo(vinNo==null?"没有车":vinNo);
			userIntegral.setIntegral(userIntegral.getIntegral());
			userIntegral.setType(userIntegral.getType());
			userIntegral.setCreater(UserUtils.getCurrentUser().getRealname());
			userIntegral.setCreateTime(new Date());
			int result = this.insert(userIntegral);
			if(result == 0){
				flag = false;
			}
		}
			UserIntegralCount userIntegralCount = userIntegralCountService.findByUserId(userIntegral.getUserId());
			
			if(userIntegralCount == null){
				UserIntegralCount userCount= new UserIntegralCount();
				userCount.setId(RandomUtils.RandomUUID());
				userCount.setAccessSystemId(userIntegral.getAccessSystemId());
				userCount.setAppId(userIntegral.getAppId());
				userCount.setUserId(userIntegral.getUserId());
				userCount.setVinNo(vinNo==null?"没有车":vinNo);
				userCount.setType(userIntegral.getType());
				userCount.setNumber(Integer.valueOf(userIntegral.getIntegral()));
				userCount.setCreater(UserUtils.getCurrentUser().getRealname());
				userCount.setCreateTime(new Date());
				int insert = userIntegralCountService.insert(userCount);
				if(insert == 0){
					flag = false;
				}
			}else{
				String type = userIntegral.getType();
				int num=0;
				if(type.equals("00")) {
					num=userIntegralCount.getNumber()+Integer.valueOf(userIntegral.getIntegral());
				}else if (type.equals("01")) {
					num=userIntegralCount.getNumber()-Integer.valueOf(userIntegral.getIntegral());
				}
				
				userIntegralCount.setNumber(num);
				userIntegralCount.setModifier(UserUtils.getCurrentUser().getRealname());
				userIntegralCount.setModifyTime(new Date());
				int update = userIntegralCountService.integralUpdate(userIntegralCount);
				if(update == 0){
					flag =false;
				}
			}
			
			
		return flag;
	}
	
	@Transactional(readOnly=false)
	public int insert(UserIntegral userIntegral) throws Exception{
		userIntegral.preInsert();
		int result = userIntegralDao.insert(userIntegral);
		return result;
	}
	
	@Transactional(readOnly=false)
	public int deleteById(String id) throws Exception{
		int result = userIntegralDao.deleteById(id);
		return result;
	}
	
	@Transactional(readOnly=false)
	public int deleteByIds(String ids) throws Exception{
		int result = userIntegralDao.deleteByIds(StringUtils.tokenizeToList(ids));
		return result;
	}
	
	@Transactional(readOnly=false)
	public int update(UserIntegral userIntegral) throws Exception{
		userIntegral.preUpdate();
		int result = userIntegralDao.update(userIntegral);
		return result;
	}
	
	/**
	 * 显示应用程序中文名
	 * @param findByObject
	 */
	public void showAppId(List<UserIntegral> findByObject){
		for (UserIntegral userIntegral : findByObject) {
			if(userIntegral.getAppId().equals("00")){
				userIntegral.setAppId("APP");
			}
			if(userIntegral.getAppId().equals("01")){
				userIntegral.setAppId("PC");
			}
			if(userIntegral.getAppId().equals("02")){
				userIntegral.setAppId("Android");
			}
		}
	}
	
	/**
	 * 分页查询
	 * @param page
	 * @param inputDto
	 * @return
	 * @throws Exception
	 */
	public PageList<UserIntegral> findByPage(PageList<UserIntegral> page, UserIntegralInputDTO inputDto) throws Exception{
		
		if(page == null){
			page = new PageList<UserIntegral>();
		}
		List<UserIntegral> findByObject = userIntegralDao.findByObject(inputDto);
		this.showAppId(findByObject);
		long totalCount = userIntegralDao.countByObject(inputDto);
		if(totalCount > 0){
			// 设置记录总条数
			page.setTotal(totalCount);
			
			// 设置分页参数，查询数据
			inputDto.setLimitStart((page.getPage() - 1) * page.getPageSize());
			inputDto.setLimitSize(page.getPageSize());
			page.setRows(findByObject);
		}
		
		return page;
	}
	
	/**
	* 查询列表
	*/
	public UserIntegral findByObject(UserIntegralInputDTO inputDto) throws Exception{
		return userIntegralDao.findOneByObject(inputDto);
	}

}
