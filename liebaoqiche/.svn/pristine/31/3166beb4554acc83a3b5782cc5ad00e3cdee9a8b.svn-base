<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.ibest.pay.dao.PayChannelDao">

    <sql id="allColumns">
    	lpc.id as id,    	
    	lpc.pay_channel_name as payChannelName, 	
    	lpc.is_delete as isDelete,    	
    	lpc.creater as creater,    	
    	lpc.create_time as createTime,    	
    	lpc.modifier as modifier,    	
    	lpc.modify_time as modifyTime,    	
    	lpc.version as version,    	
    	lpc.remarks as remarks    	
    </sql>
    
    <sql id="joinOthers">
    </sql>
    
    <sql id="searchWhere">
    	<!-- 根据需要自行设置，同时同步InputDTO中的参数
		<if test="id != null and id != ''">
			and lpc.id = #{id}
		</if>-->
		<if test="payChannelName != null and payChannelName != ''">
			and CONCAT(
			IFNULL(lpc.pay_channel_name,'')
			) LIKE CONCAT('%%', #{payChannelName},'%%')
		</if>
		<!-- <if test="creater != null and creater != ''">
			and lpc.creater = #{creater}
		</if>
		<if test="createTime != null">
			and lpc.create_time = #{createTime}
		</if>
		<if test="modifier != null and modifier != ''">
			and lpc.modifier = #{modifier}
		</if>
		<if test="modifyTime != null">
			and lpc.modify_time = #{modifyTime}
		</if>
		<if test="version != null and version != ''">
			and lpc.version = #{version}
		</if>
		<if test="createBy != null and createBy != ''">
			and lpc.CREATE_BY = #{createBy}
		</if>
		<if test="createDate != null">
			and lpc.CREATE_DATE = #{createDate}
		</if>
		<if test="updateBy != null and updateBy != ''">
			and lpc.UPDATE_BY = #{updateBy}
		</if>
		<if test="updateDate != null">
			and lpc.UPDATE_DATE = #{updateDate}
		</if>
		-->
		<if test="isDelete != null">
			and lpc.IS_DELETE = #{isDelete}
		</if>
    </sql>
    
    <sql id="searchOrder">
    	<if test="order != null and order != '' and desc != null and desc != ''">
			order by lpc.order desc
		</if>
    </sql>
	
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		<selectKey  keyProperty="id" resultType="java.lang.String" order="BEFORE">
             select uuid()
		</selectKey>
		insert into liebao_pay_channel(
			id,
	    	pay_channel_name,	    	
	    	is_delete,	    	
	    	creater,	    	
	    	create_time,	    	
	    	modifier,	    	
	    	modify_time,	    	
	    	version,	    	
	    	remarks	    	
		) values(
			#{id},			 
			#{payChannelName},			 
			#{isDelete},			 
			#{creater},			 
			#{createTime},			 
			#{modifier},			 
			#{modifyTime},			 
			#{version},			 
			#{remarks}			 
		)
	</insert>
	
	<select id="findById" resultType="PayChannel">
		select
			<include refid="allColumns"/>
		from
			liebao_pay_channel lpc
			<include refid="joinOthers"/>
		where
			lpc.id = #{id}
	</select>
	
	<select id="findOneByObject" resultType="PayChannel">
		select
			<include refid="allColumns"/>
		from
			liebao_pay_channel lpc
			<include refid="joinOthers"/>
		<where>
			<include refid="searchWhere"/>
		</where>
	</select>
	
	<select id="countByObject" resultType="Long">
		select
			count(lpc.id)
		from
			liebao_pay_channel lpc
			<include refid="joinOthers"/>
		<where>
			<include refid="searchWhere"/>
		</where>
	</select>
	
	<select id="findByObject" resultType="PayChannel">
		select
			<include refid="allColumns"/>
		from
			liebao_pay_channel lpc
			<include refid="joinOthers"/>
		<where>
			<include refid="searchWhere"/>
		</where>
 		order by lpc.modify_time desc
  		<if test="limitStart != null and limitSize != null">
         	LIMIT #{limitStart},#{limitSize}
 		</if>
	</select>
	
	<update id="update">
		update liebao_pay_channel set
			pay_channel_name=#{payChannelName},
			is_delete=#{isDelete},			
			modifier=#{modifier},	
			modify_time=#{modifyTime},			
			version=#{version},			
			remarks=#{remarks}			
		where
			id = #{id}
	</update>
	
	<!-- 物理删除 -->
	<delete id="deleteById">
		delete from liebao_pay_channel where id = #{id}
	</delete>
	
	<delete id="deleteByIds">
		delete from liebao_pay_channel where id in 
		<foreach collection="ids" open="(" close=")" separator="," item="id">
			#{id}
		</foreach>
	</delete>
	
	
	<!-- 逻辑删除 
	<update id="deleteById">
		update liebao_pay_channel set is_delete = 1 where id = #{id}
	</update>
	
	<update id="deleteByIds" parameterType="List">
		update liebao_pay_channel set is_delete = 1 where id in 
		<foreach collection="ids" open="(" close=")" separator="," item="id">
			#{id}
		</foreach>
	</update>-->
	
	<select id="findByAll" resultType="PayChannel">
		select
			<include refid="allColumns"/>
		from
			liebao_pay_channel lpc
		where lpc.is_delete = 0
	</select>
	
	<select id="findByName" resultType="PayChannel">
		select
			<include refid="allColumns"/>
		from
			liebao_pay_channel lpc
	</select>
	
	<select id="findByPayChannelName" resultType="PayChannel">
		select
			<include refid="allColumns"/>
		from
			liebao_pay_channel lpc
		<where>
			lpc.pay_channel_name = #{payChannelName}
		</where>	
	</select>
</mapper>