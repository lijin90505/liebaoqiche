package com.ibest.accesssystem.service;

import com.ibest.accesssystem.dao.*;
import com.ibest.accesssystem.dto.input.*;
import com.ibest.accesssystem.entity.*;
import com.ibest.framework.common.utils.StringUtils;
import com.ibest.utils.ConstantUtils;
import com.ibest.utils.RandomUtils;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.ibest.framework.common.utils.PageList;

import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Service
@Transactional(readOnly = true)
public class AccessSystemService {

	@Autowired
	protected AccessSystemDao accessSystemDao;

	@Autowired
	protected PayChannelPermissionAssignmentDao payChannelPermissionAssignmentDao;

	@Autowired
	protected PointPermissionAssignmentDao pointPermissionAssignmentDao;

	@Autowired
	protected CouponPermissionAssignmentDao couponPermissionAssignmentDao;

	@Autowired
	protected ActivityPermissionAssignmentDao activityPermissionAssignmentDao;

	public AccessSystem findById(String id)
			throws Exception {
		return accessSystemDao.findById(id);
	}

	@Transactional(readOnly = false)
	public int insert(AccessSystem accessSystem)
			throws Exception {
		accessSystem.preInsert();
		int result = accessSystemDao.insert(accessSystem);
		return result;
	}

	@Transactional(readOnly = false)
	public int deleteById(String id)
			throws Exception {
		int result = accessSystemDao.deleteById(id);
		return result;
	}

	@Transactional(readOnly = false)
	public int deleteByIds(String ids)
			throws Exception {
		int result = accessSystemDao.deleteByIds(StringUtils.tokenizeToList(ids));
		return result;
	}

	@Transactional(readOnly = false)
	public int update(AccessSystem accessSystem)
			throws Exception {
		accessSystem.preUpdate();
		int result = accessSystemDao.update(accessSystem);
		return result;
	}

	/**
	 * 分页查询
	 *
	 * @param page
	 * @param inputDto
	 * @return
	 * @throws Exception
	 */
	public PageList<AccessSystem> findByPage(PageList<AccessSystem> page, AccessSystemInputDTO inputDto)
			throws Exception {

		if (page == null) {
			page = new PageList<AccessSystem>();
		}

		long totalCount = accessSystemDao.countByObject(inputDto);
		if (totalCount > 0) {
			// 设置记录总条数
			page.setTotal(totalCount);

			// 设置分页参数，查询数据
			inputDto.setLimitStart((page.getPage() - 1) * page.getPageSize());
			inputDto.setLimitSize(page.getPageSize());
			page.setRows(accessSystemDao.findByObject(inputDto));
		}

		return page;
	}

	/**
	 * 查询列表
	 */
	public List<AccessSystem> findByObject(AccessSystemInputDTO inputDto)
			throws Exception {
		return accessSystemDao.findByObject(inputDto);
	}

	public AccessSystem findOneByObject(AccessSystemInputDTO inputDto)
			throws Exception {
		return accessSystemDao.findOneByObject(inputDto);
	}

	/**
	 * 获取系统拥有的支付渠道
	 *
	 * @param systemSign
	 * @return
	 * @throws Exception
	 */
	public AccessSystem getSystemPayChannnel(String systemSign)
			throws Exception {
		AccessSystem accessSystem = accessSystemDao.findById(systemSign);
		if (accessSystem != null) {
			PayChannelPermissionAssignmentInputDTO inputDTO = new PayChannelPermissionAssignmentInputDTO();
			inputDTO.setSystemSign(systemSign);
			accessSystem.setSysChoosedPayChannelList(payChannelPermissionAssignmentDao.getChoosedPayChannel(inputDTO));
			accessSystem.setSysUnChoosedPayChannelList(payChannelPermissionAssignmentDao.getUnChoosedPayChannel(inputDTO));
		}
		return accessSystem;
	}

	/**
	 * 授权
	 *
	 * @param systemSign    系统id
	 * @param allChannelsId 支付渠道id
	 */
	@Transactional(readOnly = false)
	public void accredit(String systemSign, String allChannelsId) {

		// 删除已经授权的角色
		payChannelPermissionAssignmentDao.deleteBySystemSign(systemSign);
		// 重新授权角色
		if (StringUtils.isNotEmpty(allChannelsId)) {
			String[] cids = allChannelsId.split(",");
			for (String cid : cids) {
				PayChannelPermissionAssignment payChannelPermissionAssignment = new PayChannelPermissionAssignment();
				payChannelPermissionAssignment.setSystemSign(systemSign);
				payChannelPermissionAssignment.setPayChannelId(cid);
				payChannelPermissionAssignment.preInsert();
				payChannelPermissionAssignment.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				payChannelPermissionAssignment.setId(RandomUtils.RandomUUID());
				payChannelPermissionAssignmentDao.insert(payChannelPermissionAssignment);
			}
		}
	}

	//``````````````````````积分规则`````````````````````````````````

	/**
	 * 获取系统拥有的积分规则
	 *
	 * @param systemSign
	 * @return
	 * @throws Exception
	 */
	public AccessSystem getSystemPointRule(String systemSign)
			throws Exception {
		AccessSystem accessSystem = accessSystemDao.findById(systemSign);
		if (accessSystem != null) {
			PointPermissionAssignmentInputDTO inputDTO = new PointPermissionAssignmentInputDTO();
			inputDTO.setSystemSign(systemSign);
			accessSystem.setSysChoosePointRuleList(pointPermissionAssignmentDao.getChoosedPointRule(inputDTO));
			accessSystem.setSysUnChoosePointRuleList(pointPermissionAssignmentDao.getUnChoosedPointRule(inputDTO));
		}
		return accessSystem;
	}

	/**
	 * 授权
	 *
	 * @param systemSign      系统id
	 * @param allPointRulesId 积分id
	 */
	@Transactional(readOnly = false)
	public void accreditPoint(String systemSign, String allPointRulesId) {

		// 删除已经授权的角色
		pointPermissionAssignmentDao.deleteBySystemSign(systemSign);
		// 重新授权角色
		if (StringUtils.isNotEmpty(allPointRulesId)) {
			String[] pids = allPointRulesId.split(",");
			for (String pid : pids) {
				PointPermissionAssignment pointPermissionAssignment = new PointPermissionAssignment();
				pointPermissionAssignment.setSystemSign(systemSign);
				pointPermissionAssignment.setPointRuleId(pid);
				pointPermissionAssignment.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				pointPermissionAssignment.setId(RandomUtils.RandomUUID());
				pointPermissionAssignment.preInsert();
				pointPermissionAssignmentDao.insert(pointPermissionAssignment);
			}
		}
	}

	//``````````````````````卡券`````````````````````````````````

	/**
	 * 获取系统拥有的卡券
	 *
	 * @param systemSign
	 * @return
	 * @throws Exception
	 */
	public AccessSystem getSystemCoupon(String systemSign)
			throws Exception {
		AccessSystem accessSystem = accessSystemDao.findById(systemSign);
		if (accessSystem != null) {
			CouponPermissionAssignmentInputDTO inputDTO = new CouponPermissionAssignmentInputDTO();
			inputDTO.setSystemSign(systemSign);
			accessSystem.setSysChooseCouponList(couponPermissionAssignmentDao.getChoosedCoupon(inputDTO));
			accessSystem.setSysUnChooseCouponList(couponPermissionAssignmentDao.getUnChoosedCoupon(inputDTO));
		}
		return accessSystem;
	}

	/**
	 * 授权
	 *
	 * @param systemSign      系统id
	 * @param allCouponsId 卡券id
	 */
	@Transactional(readOnly = false)
	public void accreditCoupon(String systemSign, String allCouponsId) {

		// 删除已经授权的角色
		couponPermissionAssignmentDao.deleteBySystemSign(systemSign);
		// 重新授权角色
		if (StringUtils.isNotEmpty(allCouponsId)) {
			String[] ids = allCouponsId.split(",");
			for (String id : ids) {
				CouponPermissionAssignment couponPermissionAssignment = new CouponPermissionAssignment();
				couponPermissionAssignment.setSystemSign(systemSign);
				couponPermissionAssignment.setCouponId(id);
				couponPermissionAssignment.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				couponPermissionAssignment.setId(RandomUtils.RandomUUID());
				couponPermissionAssignment.preInsert();
				couponPermissionAssignmentDao.insert(couponPermissionAssignment);
			}
		}
	}

	//``````````````````````活动`````````````````````````````````

	/**
	 * 获取系统拥有的活动
	 *
	 * @param systemSign
	 * @return
	 * @throws Exception
	 */
	public AccessSystem getSystemActivity(String systemSign)
			throws Exception {
		AccessSystem accessSystem = accessSystemDao.findById(systemSign);
		if (accessSystem != null) {
			ActivityPermissionAssignmentInputDTO inputDTO = new ActivityPermissionAssignmentInputDTO();
			inputDTO.setSystemSign(systemSign);
			accessSystem.setSysChooseActivityList(activityPermissionAssignmentDao.getChoosedActivity(inputDTO));
			accessSystem.setSysUnChooseActivityList(activityPermissionAssignmentDao.getUnChoosedActivity(inputDTO));
		}
		return accessSystem;
	}

	/**
	 * 授权
	 *
	 * @param systemSign      系统id
	 * @param allActivitysId 活动id
	 */
	@Transactional(readOnly = false)
	public void accreditActivity(String systemSign, String allActivitysId) {

		// 删除已经授权的角色
		activityPermissionAssignmentDao.deleteBySystemSign(systemSign);
		// 重新授权角色
		if (StringUtils.isNotEmpty(allActivitysId)) {
			String[] ids = allActivitysId.split(",");
			for (String id : ids) {
				ActivityPermissionAssignment activityPermissionAssignment = new ActivityPermissionAssignment();
				activityPermissionAssignment.setSystemSign(systemSign);
				activityPermissionAssignment.setActivityId(id);
				activityPermissionAssignment.setIsDelete(ConstantUtils.UPDATE_SET_ZERO);
				activityPermissionAssignment.setId(RandomUtils.RandomUUID());
				activityPermissionAssignment.preInsert();
				activityPermissionAssignmentDao.insert(activityPermissionAssignment);
			}
		}
	}
}
