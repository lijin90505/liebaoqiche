package com.ibest.pay.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.ibest.framework.common.enums.EnumsRtnMapResult;
import com.ibest.framework.common.persistence.BaseController;
import com.ibest.framework.common.utils.PageList;
import com.ibest.pay.ReconChannelEnum;
import com.ibest.pay.dto.input.WechatPayRefundReconInputDTO;
import com.ibest.pay.entity.WechatPayRecon;
import com.ibest.pay.entity.WechatPayRefundRecon;
import com.ibest.pay.service.WechatPayRefundReconService;
import com.ibest.utils.HttpRequestUtils;

/**
 * 支付退款对账
 * @ClassName: WechatPayRefundReconController 
 * @author: WeiJia  
 * @date: 2018年4月3日下午4:06:15
 */
@Controller
@RequestMapping(value="${adminPath}/pay/wechatPayRefundRecon")
public class WechatPayRefundReconController extends BaseController {
	
	private static final Logger logger = LoggerFactory.getLogger(WechatPayRefundReconController.class);
	
	@Autowired
	private WechatPayRefundReconService wechatPayRefundReconService;
	
	/**
	* 进入到列表页
	*/
	@RequestMapping(value="/")
	public String index(){
		return "module/pay/wechatPayRefundRecon/wechatPayRefundReconList";
	}
	
	/**
	* 进入到表单页-创建
	*/
	@RequestMapping(value="/add")
	public String add(){
		
		return "module/pay/wechatPayRefundRecon/wechatPayRefundReconForm";
	}
	
	/**
	* 进入到表单页，编辑
	*/
	@RequestMapping(value="/edit")
	public String edit(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				WechatPayRefundRecon wechatPayRefundRecon = wechatPayRefundReconService.findById(id);
				if(wechatPayRefundRecon != null){
					model.addAttribute("wechatPayRefundRecon", wechatPayRefundRecon);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要编辑的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/pay/wechatPayRefundRecon/wechatPayRefundReconForm";
	}
	
	/**
	* 进入到详情页
	*/
	@RequestMapping(value="/view")
	public String view(@RequestParam String id, Model model){
		try {
			if(StringUtils.isNotEmpty(id)){
				WechatPayRefundRecon wechatPayRefundRecon = wechatPayRefundReconService.findById(id);
				if(wechatPayRefundRecon != null){
					model.addAttribute("wechatPayRefundRecon", wechatPayRefundRecon);
				}else{
					setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "您查看的信息不存在！", model);
				}
			}else{
				setRtnCodeAndMsg(EnumsRtnMapResult.FAILURE.getCode(), "请选择需要查看的信息！", model);
			}
		} catch (Exception e) {
			setRtnCodeAndMsg(EnumsRtnMapResult.EXCEPTION.getCode(), EnumsRtnMapResult.EXCEPTION.getMsg(), model);
		}
		return "module/pay/wechatPayRefundRecon/wechatPayRefundReconDetail";
	}

	/**
	* 异步分页查询
	*/
	@ResponseBody
	@RequiresPermissions("wechatPayRefundRecon:query")
	@RequestMapping(value="/list")
	public PageList<WechatPayRefundRecon> list(WechatPayRefundReconInputDTO wechatPayRefundRecon, HttpServletRequest request){
		
		PageList<WechatPayRefundRecon> pageList = new PageList<WechatPayRefundRecon>();
		
		try {
			//设置分页参数
			super.setPage(request, pageList);
			pageList = wechatPayRefundReconService.findByPage(pageList, wechatPayRefundRecon);
			
			List<WechatPayRefundRecon> reconList = pageList.getRows();
			List<WechatPayRefundRecon> list = new ArrayList<WechatPayRefundRecon>();
			if(reconList!=null && reconList.size()>0) {
				for (WechatPayRefundRecon wpr : reconList) {
					if(wpr.getReconChannel().equals("00")) {
						wpr.setReconChannel("微信");
					}else if(wpr.getReconChannel().equals("01")) {
						wpr.setReconChannel("支付宝");
					}else if(wpr.getReconChannel().equals("02")) {
						wpr.setReconChannel("银联");
					}
					
					if(wpr.getBillType().equals("SUCCESS")) {
						wpr.setBillType("支付成功");
					}else {
						wpr.setBillType("退款");
					}
					
					if(wpr.getTradeType().equals("NATIVE")) {
						wpr.setTradeType("微信扫码支付");
					}else if(wpr.getTradeType().equals("APP")) {
						wpr.setTradeType("微信APP支付");
					}else if(wpr.getTradeType().equals("JSAPI")){
						wpr.setTradeType("微信公众号支付");
					}else if(wpr.getTradeType().equals("MWEB")) {
						wpr.setTradeType("微信H5支付");
					}
					if(wpr.getTradeState().equals("SUCCESS")) {
						wpr.setTradeState("支付成功");
					}else if(wpr.getTradeState().equals("REFUND")) {
						wpr.setTradeState("转入退款");
					}else if(wpr.getTradeState().equals("NOTPAY")) {
						wpr.setTradeState("未支付");
					}else if(wpr.getTradeState().equals("CLOSED")) {
						wpr.setTradeState("已关闭");
					}else if(wpr.getTradeState().equals("USERPAYING")) {
						wpr.setTradeState("用户支付中");
					}else if(wpr.getTradeState().equals("REVOKED")) {
						wpr.setTradeState("已撤销");
					}else if(wpr.getTradeState().equals("PAYERROR")) {
						wpr.setTradeState("支付失败");
					}
					
					if(wpr.getFeeType().equals("CNY")) {
						wpr.setFeeType("人民币");
					}
					if(wpr.getReconState().equals("00")) {
						wpr.setReconState("对账成功");
					}else if(wpr.getReconState().equals("01")) {
						wpr.setReconState("支付状态不一致");
					}else if(wpr.getReconState().equals("02")) {
						wpr.setReconState("支付金额不一致");
					}else{
						wpr.setReconState("对账失败");
					}
					
					if(wpr.getRefundType().equals("ORIGINAL")) {
						wpr.setRefundType("原路退款");
					}else if(wpr.getRefundType().equals("BALANCE")) {
						wpr.setRefundType("退回到余额");
					}else if(wpr.getRefundType().equals("OTHER_BALANCE")) {
						wpr.setRefundType("原账户异常退到其他余额账户");
					}else if(wpr.getRefundType().equals("OTHER_BANKCARD")) {
						wpr.setRefundType("原银行卡异常退到其他银行卡");
					}
					
					if(wpr.getRefundState().equals("SUCCESS")) {
						wpr.setRefundState("退款成功");
					}else if(wpr.getRefundState().equals("REFUNDCLOSE")) {
						wpr.setRefundState("退款关闭");
					}else if(wpr.getRefundState().equals("PROCESSING")) {
						wpr.setRefundState("退款处理中");
					}else if(wpr.getRefundState().equals("CHANGE")) {
						wpr.setRefundState("退款异常");
					}
					
					if(wpr.getBankType().equals("LQT")) {
						wpr.setBankType("零钱通");
					}else if(wpr.getBankType().equals("CFT")) {
						wpr.setBankType("零钱");
					}else {
						wpr.setBankType("银行卡");
					}
					list.add(wpr);
				}
			}
			pageList.setRows(list);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return pageList;
	}
	
	/**
	* 异步表单提交
	*/
	@ResponseBody
	@RequiresPermissions("wechatPayRefundRecon:create")
	@RequestMapping(value="create")
	public Map<String, Object> insert(WechatPayRefundRecon wechatPayRefundRecon){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = wechatPayRefundReconService.insert(wechatPayRefundRecon);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("wechatPayRefundRecon:update")
	@RequestMapping(value="update")
	public Map<String, Object> update(WechatPayRefundRecon wechatPayRefundRecon){

		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "保存成功");
		
		try {
			int result = wechatPayRefundReconService.update(wechatPayRefundRecon);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "保存失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("wechatPayRefundRecon:delete")
	@RequestMapping(value="delete")
	public Map<String, Object> delete(@RequestParam(required=true) String ids){
		
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		setRtnCodeAndMsgBySuccess(rtnMap, "删除成功");
		
		try {
			int result = wechatPayRefundReconService.deleteByIds(ids);
			if(result == 0){
				setRtnCodeAndMsgByFailure(rtnMap, "删除失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			setRtnCodeAndMsgByException(rtnMap, null);
		}
		return rtnMap;
	}
	
	@ResponseBody
	@RequiresPermissions("wechatPayRefundRecon:downloadRecon")
	@RequestMapping(value="downloadRecon")
	public Map<String, Object> downloadRecon(String reconChannel,String billType,String billDate){
		Map<String, Object> rtnMap = new HashMap<String, Object>();
		// 获取支付方式
		ReconChannelEnum rce = ReconChannelEnum.getReconChannel(new Integer(reconChannel));
		switch (rce) {
			case WECHATPAY:
				logger.info("进入微信退款对账...");
				billType="REFUND";
//				String url = "http://localhost:7707/liebaoqiche_interface";
				String url = "http://172.24.102.61:8085/liebaoqiche_interface";
				String payRecon = "02";
				String jsonParam = "{\"reqMap\":{\"billDate\":\""+billDate.replaceAll("-", "")+"\",\"payRecon\":\""+payRecon+"\",\"billType\":\""+billType+"\"}}";
				String rs = HttpRequestUtils.doJsonRequest(url+"/api/liebao/pay/payRecon", jsonParam, "");
				JSONObject json = JSONObject.parseObject(rs);
				String returnCode = json.getString("rtnCode");
			case AILPAY:
				logger.info("进入支付宝退款对账...");
				String payRecon1 = "01";
				String aliJsonParam = "{\"reqMap\":{\"billDate\":\""+billDate.replaceAll("-", "")+"\",\"payRecon\":\""+payRecon1+"\",\"billType\":\""+billType+"\"}}";
				String url1 = "http://localhost:8080/liebaoqiche_interface";
				String rs1 = HttpRequestUtils.doJsonRequest(url1+"/api/liebao/pay/payRecon", aliJsonParam, "");
				JSONObject json1 = JSONObject.parseObject(rs1);
				String returnCode1 = json1.getString("result");
				break;
			case UNIONPAY:	
				logger.info("进入银联退款对账...");
				String payRecon2 = "01";
				String unJsonParam = "{\"reqMap\":{\"billDate\":\""+billDate.replaceAll("-", "")+"\",\"payRecon\":\""+payRecon2+"\",\"billType\":\""+billType+"\"}}";
				String url2 = "http://localhost:8080/liebaoqiche_interface";
				String rs2 = HttpRequestUtils.doJsonRequest(url2+"/api/liebao/pay/payRecon", unJsonParam, "");
				JSONObject json2 = JSONObject.parseObject(rs2);
				String returnCode2 = json2.getString("result");
				break;
			default:
				break;
		}
		return rtnMap;
	}
	
}
